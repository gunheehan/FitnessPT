@using FitnessPT.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@implements IDisposable

<div class="nav-menu">
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">🏋️ FitnessPT</a>

            <div class="navbar-nav ms-auto">
                @if (AuthService.IsAuthenticated)
                {
                    <span class="navbar-text me-3">
                        👋 @AuthService.CurrentUser?.Name
                    </span>
                    <button class="btn btn-outline-danger btn-sm" @onclick="Logout">
                        로그아웃
                    </button>
                }
                else
                {
                    <a class="btn btn-primary btn-sm" href="/login">
                        로그인
                    </a>
                }
            </div>
        </div>
    </nav>
</div>

@code {
    protected override void OnInitialized()
    {
        // 이벤트 구독
        AuthService.OnAuthStateChanged += OnRefreshAccount;
    }

    public void OnRefreshAccount()
    {
        // async 제거 - UI 업데이트만 하므로 동기로 충분
        Console.WriteLine($"Auth State Changed: {AuthService.IsAuthenticated}");
        if (AuthService.CurrentUser != null)
        {
            Console.WriteLine($"User: {AuthService.CurrentUser.Name}");
        }
        
        // UI 업데이트
        InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/", forceLoad: true);
    }

    public void Dispose()
    {
        // 올바른 메서드 제거
        AuthService.OnAuthStateChanged -= OnRefreshAccount;
    }
}