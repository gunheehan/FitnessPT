@using FitnessPT.Models
@using FitnessPT.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@implements IDisposable
@rendermode InteractiveServer

<div class="nav-menu">
    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="/">🏋️ FitnessPT</a>

            <div class="navbar-nav ms-auto">
                @if (user != null)
                {
                    <span class="navbar-text me-3">
                        👋 @user.Name
                    </span>
                    <button class="btn btn-outline-danger btn-sm" @onclick="Logout">
                        로그아웃
                    </button>
                }
                else
                {
                    <a class="btn btn-primary btn-sm" href="/login">
                        로그인
                    </a>
                }
            </div>
        </div>
    </nav>
</div>

@code {
    private User? user;
    
    protected override async Task OnInitializedAsync()
    {
        AuthService.OnAuthStateChanged += OnRefreshAccount;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AuthService.InitializeAsync();
            StateHasChanged();
        }
    }
    
    public void OnRefreshAccount(User? _user)
    {
        user = _user;
        InvokeAsync(StateHasChanged);
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/", forceLoad: true);
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= OnRefreshAccount;
    }
}