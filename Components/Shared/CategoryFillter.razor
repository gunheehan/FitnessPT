@namespace FitnessPT.Components.Shared
@rendermode InteractiveServer

<div class="search-section">
    <div class="filters">
        <select class="form-select" @bind="SelectedLevel" @bind:after="OnFilterChanged">
            <option value="">모든 레벨</option>
            <option value="beginner">초급</option>
            <option value="intermediate">중급</option>
            <option value="advanced">고급</option>
        </select>

        <select class="form-select" @bind="SelectedCategory" @bind:after="OnFilterChanged">
            <option value="">모든 카테고리</option>
            <option value="upper_body">상체</option>
            <option value="lower_body">하체</option>
            <option value="core">코어</option>
            <option value="cardio">유산소</option>
            <option value="full_body">전신</option>
        </select>

        @if (!string.IsNullOrEmpty(SelectedLevel) || !string.IsNullOrEmpty(SelectedCategory))
        {
            <button class="btn btn-secondary" @onclick="HandleClearFilters">
                ✖ 초기화
            </button>
        }
    </div>
</div>

@code {
    private string selectedLevel = "";
    private string selectedCategory = "";

    [Parameter]
    public string SelectedLevel
    {
        get => selectedLevel;
        set
        {
            if (selectedLevel != value)
            {
                selectedLevel = value;
                SelectedLevelChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<string> SelectedLevelChanged { get; set; }

    [Parameter]
    public string SelectedCategory
    {
        get => selectedCategory;
        set
        {
            if (selectedCategory != value)
            {
                selectedCategory = value;
                SelectedCategoryChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<string> SelectedCategoryChanged { get; set; }
    
    [Parameter] 
    public EventCallback OnFiltersChanged { get; set; }

    private async Task OnFilterChanged()
    {
        Console.WriteLine($"필터 변경됨 - 레벨: {SelectedLevel}, 카테고리: {SelectedCategory}");
        await OnFiltersChanged.InvokeAsync();
    }

    private async Task HandleClearFilters()
    {
        Console.WriteLine("필터 초기화");
        SelectedLevel = "";
        SelectedCategory = "";
        await OnFiltersChanged.InvokeAsync();
    }
}