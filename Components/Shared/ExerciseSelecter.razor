@using FitnessPT.Dtos
@using FitnessPT.Services
@inject IExerciseService exerciseService

@rendermode InteractiveServer
@namespace FitnessPT.Components.Shared

<dic class="search-section">
    <div class="form-row">
        <CategoryFillter
            isEdit = "true"
            @bind-SelectedLevel="level"
            @bind-SelectedCategory="category"
            OnFiltersChanged="ApplyFilters" />
    </div>
    <div class="form-row">
        <div class="filters">
            @if (exerciseDP?.Any() == true)
            {
                <select class="form-select" @bind="selectedExerciseId" @bind:after="InputNewExercise">
                    <option value="0">운동을 선택하세요</option>
                    @foreach (var exercise in exerciseDP)
                    {
                        <option value="@exercise.Id">@exercise.Name</option>
                    }
                </select>
            }
        </div>
    </div>
</dic>

@code {
    [Parameter]
    public EventCallback<ExerciseDto> OnSelectExercise { get; set; }

    private bool isinit = false;
    private string level;
    private string category;
    private List<ExerciseDto> exerciseList = new List<ExerciseDto>();
    private List<ExerciseDto> exerciseDP = new List<ExerciseDto>();
    private ExerciseDto SelectExercise;
    private int selectedExerciseId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!isinit)
        {
            isinit = true;
            var data = await exerciseService.GetExercisesAsync(1,20,null,null);
            exerciseList = data.Items;
            exerciseDP = data.Items;
            StateHasChanged();
        }
    }

    private async Task ApplyFilters()
    {
        var data = await exerciseService.GetExercisesAsync(1,20, level, category);
        exerciseDP = data.Items;
    }

    private async Task InputNewExercise()
    {
        var selectedExercise = exerciseDP.FirstOrDefault(e => e.Id == selectedExerciseId);
        if (selectedExercise != null)
        {
            await OnSelectExercise.InvokeAsync(selectedExercise);
        }
    }

}