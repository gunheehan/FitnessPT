@page "/contents_manager"
@using FitnessPT.Services
@using FitnessPT.Modals.ExerciseModals
@inject IExerciseApiService ExerciseApiService
@inject ICategoryApiService CategoryApiService
@inject IJSRuntime JSRuntime
@inject ILogger<ContentsManager> Logger

@rendermode InteractiveServer

<PageTitle>운동 콘텐츠 관리</PageTitle>

<div class="container-fluid">
    <!-- 헤더 -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2><i class="fas fa-dumbbell text-primary"></i> 운동 콘텐츠 관리</h2>
        <button type="button" class="btn btn-primary" @onclick="HandleShowCreateModal">
            <i class="fas fa-plus"></i> 새 운동 추가
        </button>
    </div>

    <!-- 검색 및 필터 -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0"><i class="fas fa-search"></i> 검색 및 필터</h5>
        </div>
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">검색어</label>
                    <input type="text" class="form-control" @bind="searchTerm" @onkeypress="HandleSearchKeyPress"
                           placeholder="운동명 또는 대상 근육으로 검색" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">카테고리</label>
                    <select class="form-select" @bind="selectedCategoryId">
                        <option value="">전체 카테고리</option>
                        @if (categories != null)
                        {
                            @foreach (var category in categories.Where(c => c.ParentCategoryId == null))
                            {
                                <optgroup label="@category.CategoryName">
                                    <option value="@category.CategoryId">@category.CategoryName</option>
                                    @if (category.SubCategories != null)
                                    {
                                        @foreach (var subCategory in category.SubCategories)
                                        {
                                            <option value="@subCategory.CategoryId">├─ @subCategory.CategoryName</option>
                                        }
                                    }
                                </optgroup>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">난이도</label>
                    <select class="form-select" @bind="selectedDifficultyLevel">
                        <option value="">전체 난이도</option>
                        <option value="1">초급</option>
                        <option value="2">중급</option>
                        <option value="3">고급</option>
                        <option value="4">전문가</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label">상태</label>
                    <select class="form-select" @bind="selectedIsActive">
                        <option value="">전체 상태</option>
                        <option value="true">활성</option>
                        <option value="false">비활성</option>
                    </select>
                </div>
                <div class="col-md-1">
                    <label class="form-label">&nbsp;</label>
                    <button type="button" class="btn btn-info d-block w-100" @onclick="HandleLoadExercises">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- 에러 메시지 표시 -->
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="ClearErrorMessage"></button>
        </div>
    }

    <!-- 로딩 스피너 -->
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">로딩 중...</span>
            </div>
            <div class="mt-2">데이터를 불러오는 중...</div>
        </div>
    }
    else
    {
        <!-- 통계 카드 -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-white bg-primary">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h5 class="card-title">총 운동</h5>
                                <h3 class="mb-0">@totalCount</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-dumbbell fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-success">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h5 class="card-title">활성 운동</h5>
                                @if (exercises != null)
                                {
                                    <h3 class="mb-0">@(exercises?.Count(e => e.IsActive == true) ?? 0)</h3>
                                }
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-check-circle fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-warning">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h5 class="card-title">카테고리</h5>
                                <h3 class="mb-0">@(categories?.Count ?? 0)</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-folder fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-white bg-info">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h5 class="card-title">현재 페이지</h5>
                                <h3 class="mb-0">@currentPage / @totalPages</h3>
                            </div>
                            <div class="align-self-center">
                                <i class="fas fa-list fa-2x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- 운동 목록 -->
        @if (exercises != null && exercises.Any())
        {
            <div class="row">
                @foreach (var exercise in exercises)
                {
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card h-100 @(exercise.IsActive == false ? "border-warning" : "")">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0 text-truncate">@exercise.ExerciseName</h6>
                                <div class="dropdown">
                                    <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                                            data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <button type="button" class="dropdown-item" @onclick="@(() => HandleShowDetailsModal(exercise))">
                                                <i class="fas fa-eye"></i> 상세보기
                                            </button>
                                        </li>
                                        <li>
                                            <button type="button" class="dropdown-item" @onclick="@(() => HandleShowEditModal(exercise))">
                                                <i class="fas fa-edit"></i> 수정
                                            </button>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <button type="button" class="dropdown-item text-danger" @onclick="@(() => HandleShowDeleteModal(exercise))">
                                                <i class="fas fa-trash"></i> 삭제
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="card-body">
                                <!-- 카테고리 및 난이도 배지 -->
                                <div class="mb-2">
                                    @if (exercise.ExerciseId > 0)
                                    {
                                        <span class="badge bg-secondary me-1">@GetCategoryName(exercise.PrimaryCategoryId)</span>
                                    }
                                    @if (exercise.DifficultyLevel.HasValue)
                                    {
                                        <span class="badge @GetDifficultyBadgeClass(exercise.DifficultyLevel)">
                                            @GetDifficultyName(exercise.DifficultyLevel)
                                        </span>
                                    }
                                </div>

                                <!-- 대상 근육 -->
                                @if (!string.IsNullOrEmpty(exercise.TargetMuscles))
                                {
                                    <p class="card-text">
                                        <strong>대상 근육:</strong> @exercise.TargetMuscles
                                    </p>
                                }

                                <!-- 운동 설명 (요약) -->
                                @if (!string.IsNullOrEmpty(exercise.Instructions))
                                {
                                    <p class="card-text text-muted">
                                        @(exercise.Instructions.Length > 100
                                            ? exercise.Instructions.Substring(0, 100) + "..."
                                            : exercise.Instructions)
                                    </p>
                                }
                            </div>
                            <div class="card-footer d-flex justify-content-between align-items-center">
                                <!-- 상태 토글 -->
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox"
                                           checked="@(exercise.IsActive == true)"
                                           @onchange="@((e) => HandleToggleExerciseStatus(exercise.ExerciseId, (bool)e.Value!))" />
                                    <label class="form-check-label">
                                        @(exercise.IsActive == true ? "활성" : "비활성")
                                    </label>
                                </div>

                                <!-- 생성일 -->
                                <small class="text-muted">
                                    @exercise.CreatedAt
                                </small>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- 페이지네이션 -->
            @if (totalPages > 1)
            {
                <nav aria-label="운동 목록 페이지네이션">
                    <ul class="pagination justify-content-center">
                        @if (currentPage > 1)
                        {
                            <li class="page-item">
                                <button type="button" class="page-link" @onclick="@(() => HandleChangePage(currentPage - 1))">
                                    <i class="fas fa-chevron-left"></i> 이전
                                </button>
                            </li>
                        }

                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            var pageNumber = i;
                            <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                <button type="button" class="page-link" @onclick="@(() => HandleChangePage(pageNumber))">@pageNumber</button>
                            </li>
                        }

                        @if (currentPage < totalPages)
                        {
                            <li class="page-item">
                                <button type="button" class="page-link" @onclick="@(() => HandleChangePage(currentPage + 1))">
                                    다음 <i class="fas fa-chevron-right"></i>
                                </button>
                            </li>
                        }
                    </ul>
                </nav>
            }
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h4 class="text-muted">검색 결과가 없습니다</h4>
                <p class="text-muted">다른 검색 조건을 시도해보세요.</p>
                <button type="button" class="btn btn-primary" @onclick="HandleClearFilters">
                    전체 목록 보기
                </button>
            </div>
        }
    }
</div>

<!-- 모달 컴포넌트들 -->
<CreateExerciseModal @ref="createModal" Categories="categories" OnExerciseCreated="OnExerciseCreated" />
<EditExerciseModal @ref="editModal" Categories="categories" OnExerciseUpdated="OnExerciseUpdated" />
<DeleteExerciseModal @ref="deleteModal" OnExerciseDeleted="OnExerciseDeleted" />
<ExerciseDetailsModal @ref="detailsModal" />

@code {
    // 필드 정의
    private List<CategoryDto>? categories;
    private List<ExerciseDto>? exercises;
    private string searchTerm = string.Empty;
    private string selectedCategoryId = string.Empty;
    private string selectedDifficultyLevel = string.Empty;
    private string selectedIsActive = string.Empty;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 12;
    private int totalCount = 0;
    private int totalPages = 0;
    private string? errorMessage;

    // 모달 참조
    private CreateExerciseModal? createModal;
    private EditExerciseModal? editModal;
    private DeleteExerciseModal? deleteModal;
    private ExerciseDetailsModal? detailsModal;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadCategories();
            await LoadExercises();
        }
        catch (Exception ex)
        {
            errorMessage = $"초기화 중 오류 발생: {ex.Message}";
            Logger.LogError(ex, "컴포넌트 초기화 중 오류");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // 이벤트 핸들러 메서드들
    private async Task HandleShowCreateModal()
    {
        try
        {
            await ShowCreateModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"새 운동 추가 모달 표시 중 오류: {ex.Message}";
            Logger.LogError(ex, "새 운동 추가 모달 표시 중 오류");
        }
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        try
        {
            await OnSearchKeyPress(e);
        }
        catch (Exception ex)
        {
            errorMessage = $"검색 처리 중 오류: {ex.Message}";
            Logger.LogError(ex, "검색 키 입력 처리 중 오류");
        }
    }

    private async Task HandleLoadExercises()
    {
        try
        {
            await LoadExercises();
        }
        catch (Exception ex)
        {
            errorMessage = $"운동 목록 로드 중 오류: {ex.Message}";
            Logger.LogError(ex, "운동 목록 로드 중 오류");
        }
    }

    private async Task HandleShowDetailsModal(ExerciseDto exercise)
    {
        try
        {
            await ShowDetailsModal(exercise);
        }
        catch (Exception ex)
        {
            errorMessage = $"상세보기 모달 표시 중 오류: {ex.Message}";
            Logger.LogError(ex, "상세보기 모달 표시 중 오류");
        }
    }

    private async Task HandleShowEditModal(ExerciseDto exercise)
    {
        try
        {
            await ShowEditModal(exercise);
        }
        catch (Exception ex)
        {
            errorMessage = $"편집 모달 표시 중 오류: {ex.Message}";
            Logger.LogError(ex, "편집 모달 표시 중 오류");
        }
    }

    private async Task HandleShowDeleteModal(ExerciseDto exercise)
    {
        try
        {
            await ShowDeleteModal(exercise);
        }
        catch (Exception ex)
        {
            errorMessage = $"삭제 모달 표시 중 오류: {ex.Message}";
            Logger.LogError(ex, "삭제 모달 표시 중 오류");
        }
    }

    private async Task HandleToggleExerciseStatus(int exerciseId, bool newStatus)
    {
        try
        {
            await ToggleExerciseStatus(exerciseId, newStatus);
        }
        catch (Exception ex)
        {
            errorMessage = $"운동 상태 변경 중 오류: {ex.Message}";
            Logger.LogError(ex, "운동 상태 토글 중 오류");
        }
    }

    private async Task HandleChangePage(int page)
    {
        try
        {
            await ChangePage(page);
        }
        catch (Exception ex)
        {
            errorMessage = $"페이지 변경 중 오류: {ex.Message}";
            Logger.LogError(ex, "페이지 변경 중 오류");
        }
    }

    private async Task HandleClearFilters()
    {
        try
        {
            await ClearFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"필터 초기화 중 오류: {ex.Message}";
            Logger.LogError(ex, "필터 초기화 중 오류");
        }
    }

    private void ClearErrorMessage()
    {
        errorMessage = null;
        StateHasChanged();
    }

    // 유틸리티 메서드들
    private string GetCategoryName(int? categoryId)
    {
        if (categories == null) return "알 수 없음";
        
        foreach (var category in categories)
        {
            if (category.CategoryId == categoryId)
                return category.CategoryName;
            
            if (category.SubCategories != null)
            {
                var subCategory = category.SubCategories.FirstOrDefault(sc => sc.CategoryId == categoryId);
                if (subCategory != null)
                    return subCategory.CategoryName;
            }
        }
        return "알 수 없음";
    }

    private string GetDifficultyName(int? difficultyLevel)
    {
        return difficultyLevel switch
        {
            1 => "초급",
            2 => "중급",
            3 => "고급",
            4 => "전문가",
            _ => "미설정"
        };
    }

    private string GetDifficultyBadgeClass(int? difficultyLevel)
    {
        return difficultyLevel switch
        {
            1 => "bg-success",
            2 => "bg-warning",
            3 => "bg-danger", 
            4 => "bg-dark",
            _ => "bg-secondary"
        };
    }

    // 실제 구현 메서드들
    private async Task LoadCategories()
    {
        try
        {
            categories = await CategoryApiService.GetCategoriesAsync(false);
        }
        catch (Exception ex)
        {
            errorMessage = $"카테고리 로드 실패: {ex.Message}";
            Logger.LogError(ex, "카테고리 로드 중 오류");
            categories = new List<CategoryDto>();
        }
    }

    private async Task LoadExercises()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            StateHasChanged();

            var response = await ExerciseApiService.GetExercisesAsync(
                currentPage, 
                pageSize, 
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm, 
                string.IsNullOrEmpty(selectedCategoryId) ? null : int.Parse(selectedCategoryId),
                string.IsNullOrEmpty(selectedDifficultyLevel) ? null : int.Parse(selectedDifficultyLevel),
                string.IsNullOrEmpty(selectedIsActive) ? null : bool.Parse(selectedIsActive)
            );

            if (response.Success && response.Data != null)
            {
                exercises = response.Data;
                totalCount = response?.TotalCount ?? 0;
                totalPages = response?.TotalPages ?? 0;
            }
            else
            {
                exercises = new List<ExerciseDto>();
                errorMessage = response.ErrorMessage ?? "운동 목록을 불러오는데 실패했습니다";
            }
        }
        catch (Exception ex)
        {
            exercises = new List<ExerciseDto>();
            errorMessage = $"운동 목록 로드 실패: {ex.Message}";
            Logger.LogError(ex, "운동 목록 로드 중 오류");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

private async Task ShowCreateModal()
{
    try
    {
        if (createModal != null)
        {
            await createModal.ShowAsync();
        }
        else
        {
            errorMessage = "새 운동 추가 모달을 찾을 수 없습니다.";
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"새 운동 추가 모달 표시 중 오류: {ex.Message}";
        Logger.LogError(ex, "새 운동 추가 모달 표시 중 오류");
    }
}

private async Task ShowDetailsModal(ExerciseDto exercise)
{
    try
    {
        if (detailsModal != null)
        {
            await detailsModal.ShowAsync(exercise);
        }
        else
        {
            errorMessage = "상세보기 모달을 찾을 수 없습니다.";
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"상세보기 모달 표시 중 오류: {ex.Message}";
        Logger.LogError(ex, "상세보기 모달 표시 중 오류");
    }
}

private async Task ShowEditModal(ExerciseDto exercise)
{
    try
    {
        if (editModal != null)
        {
            await editModal.ShowAsync(exercise);
        }
        else
        {
            errorMessage = "편집 모달을 찾을 수 없습니다.";
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"편집 모달 표시 중 오류: {ex.Message}";
        Logger.LogError(ex, "편집 모달 표시 중 오류");
    }
}

private async Task ShowDeleteModal(ExerciseDto exercise)
{
    try
    {
        if (deleteModal != null)
        {
            await deleteModal.ShowAsync(exercise);
        }
        else
        {
            errorMessage = "삭제 모달을 찾을 수 없습니다.";
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"삭제 모달 표시 중 오류: {ex.Message}";
        Logger.LogError(ex, "삭제 모달 표시 중 오류");
    }
}

private async Task ToggleExerciseStatus(int exerciseId, bool newStatus)
{
    try
    {
        // 낙관적 UI 업데이트 - 먼저 UI를 업데이트하고 실패 시 롤백
        var exercise = exercises?.FirstOrDefault(e => e.ExerciseId == exerciseId);
        if (exercise != null)
        {
            var previousStatus = exercise.IsActive;
            exercise.IsActive = newStatus;
            StateHasChanged();

            try
            {
                // API 호출
                var response = await ExerciseApiService.UpdateExerciseStatusAsync(exerciseId, newStatus);
                
                if (!response.Success)
                {
                    // 실패 시 이전 상태로 롤백
                    exercise.IsActive = previousStatus;
                    errorMessage = response.ErrorMessage ?? "운동 상태 변경에 실패했습니다.";
                    StateHasChanged();
                }
            }
            catch (Exception apiEx)
            {
                // API 호출 실패 시 이전 상태로 롤백
                exercise.IsActive = previousStatus;
                errorMessage = $"운동 상태 변경 중 오류: {apiEx.Message}";
                StateHasChanged();
                throw;
            }
        }
    }
    catch (Exception ex)
    {
        errorMessage = $"운동 상태 변경 중 오류: {ex.Message}";
        Logger.LogError(ex, "운동 상태 토글 중 오류 - ExerciseId: {ExerciseId}, NewStatus: {NewStatus}", exerciseId, newStatus);
    }
}

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadExercises();
        }
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await LoadExercises();
    }

    private async Task ClearFilters()
    {
        searchTerm = string.Empty;
        selectedCategoryId = string.Empty;
        selectedDifficultyLevel = string.Empty;
        selectedIsActive = string.Empty;
        currentPage = 1;
        await LoadExercises();
    }

    // 모달 이벤트 핸들러들
    private async Task OnExerciseCreated()
    {
        await LoadExercises();
    }

    private async Task OnExerciseUpdated()
    {
        await LoadExercises();
    }

    private async Task OnExerciseDeleted()
    {
        await LoadExercises();
    }
}