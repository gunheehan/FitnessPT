@using FitnessPT.Dtos
@using FitnessPT.Components.Shared

@rendermode InteractiveServer

<div class="modal-overlay" @onclick="OnClose">
    <div class="modal-content" @onclick:stopPropagation>
        <div class="modal-header">
            <h2>@(IsEdit ? "✏️ 루틴 수정" : "➕ 새 루틴 추가")</h2>
            <button class="btn-close" @onclick="OnClose">✖</button>
        </div>
        
        <div class="modal-body">
            <div class="form-group">
                <label>루틴 이름 <span class="required">*</span></label>
                <input type="text"
                       class="form-control"
                       @bind="Routine.Name"
                       placeholder="예: 상체 박살 루틴"/>
            </div>

            <div class="form-group">
                <label>설명</label>
                <textarea class="form-control"
                          @bind="Routine.Description"
                          rows="3"
                          placeholder="운동에 대한 설명을 입력하세요"></textarea>
            </div>
            <div class="form-row">
                <CategoryFillter
                    isEdit = "true"
                    @bind-SelectedLevel="Routine.Level"
                    @bind-SelectedCategory="Routine.Category"
                    OnFiltersChanged="ApplyFilters" />
            </div>

            <div class="form-group">
                <label>이미지 URL</label>
                <input type="url"
                       class="form-control"
                       @bind="Routine.ThumbnailUrl"
                       placeholder="https://example.com/image.jpg" />
                @if (!string.IsNullOrEmpty(Routine.ThumbnailUrl))
                {
                    <div class="image-preview">
                        <img src="@Routine.ThumbnailUrl" alt="미리보기" />
                    </div>
                }
            </div>

            <div class="form-group">
                <label>운동 종목</label>
                <ExerciseSelecter
                    OnSelectExercise="AddExercise"/>
            </div>

            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="OnClose">
                    취소
                </button>
                <button class="btn btn-primary"
                        @onclick="HandleSave"
                        disabled="@(!IsValid())">
                    @(IsEdit ? "수정" : "추가")
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public RoutineDto Routine { get; set; } = new();
    
    [Parameter]
    public bool IsEdit { get; set; }
    
    [Parameter]
    public EventCallback<RoutineInfoDto> OnSave { get; set; }
    
    [Parameter]
    public EventCallback OnClose { get; set; }

    private List<RoutineExerciseDto> exerciseList;

    protected override async Task OnInitializedAsync()
    {
        exerciseList = new List<RoutineExerciseDto>();
    }

    private async Task ApplyFilters()
    {
        Console.WriteLine($"필터 적용 - 레벨: {Routine.Level}, 카테고리: {Routine.Category}");
    }
    
    private bool IsValid()
    {
        return !string.IsNullOrWhiteSpace(Routine.Name) &&
               !string.IsNullOrWhiteSpace(Routine.Level) &&
               !string.IsNullOrWhiteSpace(Routine.Category);
    }

    private async Task HandleSave()
    {
        if (IsValid())
        {
            RoutineInfoDto newInfo = new RoutineInfoDto();
            await OnSave.InvokeAsync(newInfo);
        }
    }
    
    private void AddExercise(ExerciseDto exercise)
    {
        var newExercise = new RoutineExerciseDto
        {
            RoutineId = Routine.Id,
            ExerciseId = exercise.Id,
            OrderIndex = exerciseList.Count + 1,
            Sets = 3,
            Reps = 12,
            RestSeconds = 60
        };
        
        exerciseList.Add(newExercise);
        StateHasChanged();
    }

    private void RemoveExercise(int index)
    {
        if (index >= 0 && index < exerciseList.Count)
        {
            exerciseList.RemoveAt(index);
            
            // 순서 재정렬
            for (int i = 0; i < exerciseList.Count; i++)
            {
                exerciseList[i].OrderIndex = i + 1;
            }
            
            StateHasChanged();
        }
    }

}