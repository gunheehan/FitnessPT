@using FitnessPT.Services
@using Microsoft.JSInterop
@inject IExerciseApiService ExerciseApiService
@inject IJSRuntime JSRuntime

<div class="modal fade" id="deleteExerciseModal" tabindex="-1" aria-labelledby="deleteExerciseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteExerciseModalLabel">
                    <i class="fas fa-trash text-danger"></i> 운동 삭제 확인
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-3">
                    <i class="fas fa-exclamation-triangle fa-3x text-warning"></i>
                </div>

                <h6 class="text-center mb-3">정말로 다음 운동을 삭제하시겠습니까?</h6>

                @if (selectedExercise != null)
                {
                <div class="card mb-3">
                    <div class="card-body">
                        <h6 class="card-title">@selectedExercise.ExerciseName</h6>
                        <p class="card-text">
                            <span class="badge bg-secondary">카테고리 ID: @selectedExercise.PrimaryCategoryId</span>
                            @if (selectedExercise.DifficultyLevel.HasValue)
                            {
                            <span class="badge @GetDifficultyBadgeClass(selectedExercise.DifficultyLevel) ms-1">
                                        @GetDifficultyName(selectedExercise.DifficultyLevel)
                                    </span>
                            }
                        </p>
                        @if (!string.IsNullOrEmpty(selectedExercise.TargetMuscles))
                        {
                        <p class="card-text">
                            <small class="text-muted">대상 근육: @selectedExercise.TargetMuscles</small>
                        </p>
                        }
                        @if (!string.IsNullOrEmpty(selectedExercise.Instructions))
                        {
                        <p class="card-text">
                            <small class="text-muted">@selectedExercise.Instructions</small>
                        </p>
                        }
                    </div>
                </div>
                }

                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>경고:</strong> 이 작업은 되돌릴 수 없습니다.
                    <ul class="mb-0 mt-2">
                        <li>관련된 운동 기록이 있는 경우 운동은 비활성화됩니다.</li>
                        <li>관련 기록이 없는 경우 완전히 삭제됩니다.</li>
                        <li>삭제 후에는 복구할 수 없습니다.</li>
                    </ul>
                </div>

                @if (isDeleting)
                {
                <div class="text-center">
                    <div class="spinner-border text-danger" role="status">
                        <span class="visually-hidden">삭제 중...</span>
                    </div>
                    <div class="mt-2">운동을 삭제하는 중입니다...</div>
                </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle"></i> @errorMessage
                </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isDeleting">
                    취소
                </button>
                <button type="button" @onclick="@(() => InvokeAsync(HandleDelete))">삭제
                    <span style="@(isDeleting ? "" : "display: none;")">
                        <i class="fas fa-spinner fa-spin"></i>
                        삭제 중...
                    </span>
                    <span style="@(isDeleting ? "display: none;" : "")">
                        <i class="fas fa-trash"></i>
                        삭제
                    </span>
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnExerciseDeleted { get; set; }
    [Parameter] public List<CategoryDto>? Categories { get; set; }

    private ExerciseDto? selectedExercise;
    private bool isDeleting = false;
    private string errorMessage = string.Empty;

    public async Task ShowAsync(ExerciseDto exercise)
    {
        try
        {
            selectedExercise = exercise;
            errorMessage = string.Empty;
            isDeleting = false;

// 모달 표시
            await JSRuntime.InvokeVoidAsync("showModal", "deleteExerciseModal");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"모달 표시 중 오류: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task HandleDelete()
    {
        if (selectedExercise == null) return;

        try
        {
            isDeleting = true;
            errorMessage = string.Empty;
            StateHasChanged();

            var result = await ExerciseApiService.DeleteExerciseAsync(selectedExercise.ExerciseId);

            if (result)
            {
// 성공 시 모달 닫기
                await JSRuntime.InvokeVoidAsync("hideModal", "deleteExerciseModal");
                await OnExerciseDeleted.InvokeAsync();
            }
            else
            {
                errorMessage = "운동 삭제에 실패했습니다. 다시 시도해주세요.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"오류가 발생했습니다: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }

    private string GetCategoryName(int categoryId)
    {
        if (Categories == null) return "알 수 없음";

        foreach (var category in Categories)
        {
            if (category.CategoryId == categoryId)
                return category.CategoryName;

            if (category.SubCategories != null)
            {
                var subCategory = category.SubCategories.FirstOrDefault(sc => sc.CategoryId == categoryId);
                if (subCategory != null)
                    return subCategory.CategoryName;
            }
        }

        return "알 수 없음";
    }

    private string GetDifficultyName(int? difficultyLevel)
    {
        return difficultyLevel switch
        {
            1 => "초급",
            2 => "중급",
            3 => "고급",
            4 => "전문가",
            _ => "미설정"
        };
    }

    private string GetDifficultyBadgeClass(int? difficultyLevel)
    {
        return difficultyLevel switch
        {
            1 => "bg-success",
            2 => "bg-warning",
            3 => "bg-danger",
            4 => "bg-dark",
            _ => "bg-secondary"
        };
    }

}