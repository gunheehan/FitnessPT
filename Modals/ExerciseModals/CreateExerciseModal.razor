@using System.ComponentModel.DataAnnotations
@using FitnessPT.Services
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@inject IExerciseApiService ExerciseApiService
@inject IJSRuntime JSRuntime

<div class="modal fade" id="createExerciseModal" tabindex="-1" aria-labelledby="createExerciseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createExerciseModalLabel">
                    <i class="fas fa-plus text-primary"></i> 새 운동 추가
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="row">
                        <!-- 운동명 -->
                        <div class="col-12 mb-3">
                            <label for="exerciseName" class="form-label">
                                <i class="fas fa-dumbbell"></i> 운동명 <span class="text-danger">*</span>
                            </label>
                            <InputText id="exerciseName" class="form-control" @bind-Value="model.ExerciseName" 
                                       placeholder="예: 푸시업, 벤치프레스" />
                            <ValidationMessage For="@(() => model.ExerciseName)" class="text-danger" />
                        </div>

                        <!-- 카테고리와 난이도 -->
                        <div class="col-md-6 mb-3">
                            <label for="categoryId" class="form-label">
                                <i class="fas fa-folder"></i> 카테고리
                            </label>
                            <InputSelect id="categoryId" class="form-select" @bind-Value="model.PrimaryCategoryId">
                                <option value="">카테고리를 선택하세요</option>
                                @if (Categories != null)
                                {
                                    @foreach (var category in Categories.Where(c => c.ParentCategoryId == null))
                                    {
                                        <optgroup label="@category.CategoryName">
                                            <option value="@category.CategoryId">@category.CategoryName</option>
                                            @if (category.SubCategories != null)
                                            {
                                                @foreach (var subCategory in category.SubCategories)
                                                {
                                                    <option value="@subCategory.CategoryId">├─ @subCategory.CategoryName</option>
                                                }
                                            }
                                        </optgroup>
                                    }
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => model.PrimaryCategoryId)" class="text-danger" />
                        </div>

                        <div class="col-md-6 mb-3">
                            <label for="difficultyLevel" class="form-label">
                                <i class="fas fa-chart-line"></i> 난이도
                            </label>
                            <InputSelect id="difficultyLevel" class="form-select" @bind-Value="model.DifficultyLevel">
                                <option value="">난이도를 선택하세요</option>
                                <option value="1">1 - 초급 (Beginner)</option>
                                <option value="2">2 - 중급 (Intermediate)</option>
                                <option value="3">3 - 고급 (Advanced)</option>
                                <option value="4">4 - 전문가 (Expert)</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => model.DifficultyLevel)" class="text-danger" />
                        </div>

                        <!-- 대상 근육 -->
                        <div class="col-12 mb-3">
                            <label for="targetMuscles" class="form-label">
                                <i class="fas fa-crosshairs"></i> 대상 근육
                            </label>
                            <InputText id="targetMuscles" class="form-control" @bind-Value="model.TargetMuscles" 
                                       placeholder="예: 가슴, 삼두근, 어깨" />
                            <div class="form-text">
                                이 운동으로 단련할 수 있는 주요 근육들을 입력하세요. (쉼표로 구분)
                            </div>
                            <ValidationMessage For="@(() => model.TargetMuscles)" class="text-danger" />
                        </div>

                        <!-- 운동 설명 -->
                        <div class="col-12 mb-3">
                            <label for="instructions" class="form-label">
                                <i class="fas fa-list-ol"></i> 운동 설명
                            </label>
                            <InputTextArea id="instructions" class="form-control" rows="5" @bind-Value="model.Instructions" 
                                           placeholder="운동 수행 방법을 자세히 설명해주세요." />
                            <div class="form-text">
                                정확한 자세와 수행 방법을 단계별로 설명해주세요.
                            </div>
                            <ValidationMessage For="@(() => model.Instructions)" class="text-danger" />
                        </div>
                    </div>

                    @if (isSubmitting)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">저장 중...</span>
                            </div>
                            <div class="mt-2">운동을 저장하는 중입니다...</div>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-triangle"></i> @errorMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" disabled="@isSubmitting">
                        취소
                    </button>
                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <i class="fas fa-spinner fa-spin"></i>
                            <span>저장 중...</span>
                        }
                        else
                        {
                            <i class="fas fa-save"></i>
                            <span>운동 추가</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<CategoryDto>? Categories { get; set; }
    [Parameter] public EventCallback OnExerciseCreated { get; set; }

    private CreateExerciseModel model = new();
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;

    public async Task ShowAsync()
    {
        // 모델 초기화
        model = new CreateExerciseModel();
        errorMessage = string.Empty;
        isSubmitting = false;

        // 모달 표시
        await JSRuntime.InvokeVoidAsync("showModal", "createExerciseModal");
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var createDto = new CreateExerciseDto
            {
                ExerciseName = model.ExerciseName,
                PrimaryCategoryId = model.PrimaryCategoryId,
                DifficultyLevel = model.DifficultyLevel,
                TargetMuscles = model.TargetMuscles,
                Instructions = model.Instructions
            };

            var result = await ExerciseApiService.CreateExerciseAsync(createDto);

            if (result != null)
            {
                // 성공 시 모달 닫기
                await JSRuntime.InvokeVoidAsync("hideModal", "createExerciseModal");
                await OnExerciseCreated.InvokeAsync();
            }
            else
            {
                errorMessage = "운동 추가에 실패했습니다. 다시 시도해주세요.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"오류가 발생했습니다: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    public class CreateExerciseModel
    {
        [Required(ErrorMessage = "운동명은 필수입니다.")]
        [StringLength(100, ErrorMessage = "운동명은 100자를 초과할 수 없습니다.")]
        public string ExerciseName { get; set; } = string.Empty;

        public int? PrimaryCategoryId { get; set; }

        [Range(1, 4, ErrorMessage = "난이도는 1-4 사이의 값이어야 합니다.")]
        public int? DifficultyLevel { get; set; }

        [StringLength(200, ErrorMessage = "대상 근육은 200자를 초과할 수 없습니다.")]
        public string? TargetMuscles { get; set; }

        public string? Instructions { get; set; }
    }
}